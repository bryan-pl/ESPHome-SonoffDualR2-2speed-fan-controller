substitutions:
  dev_name: sonoffdualr2

esphome:
  name: ${dev_name}
  friendly_name: SonoffDualR2
  on_boot:
    - priority: 90
      then:
      - fan.turn_on: WentylacjaPiwnicy


esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret sonoffdualr2.apikey

ota:
  password: !secret sonoffdualr2.otapasswd

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sonoffdualr2 Fallback Hotspot"
    password: !secret sonoffdualr2.fallbackAPpasswd

captive_portal:

binary_sensor:  #physical button
  - platform: gpio
    pin:
      number: GPIO10
      mode: INPUT_PULLUP
      inverted: True
    name: "Przełącz wentylator"
    id: push_button
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - fan.cycle_speed: WentylacjaPiwnicy
  

switch:  #device uses 2 relays that needs to be interlocked to work properly
  - platform: gpio
    name: "Low_speed"
    pin: GPIO12
    id: relay_low
    icon: mdi:fan-speed-1
    interlock: &interlock_group [relay_high, relay_low]
    interlock_wait_time: 300ms
  - platform: gpio
    name: "High_speed"
    pin: GPIO05
    id: relay_high
    icon: mdi:fan-speed-2
    interlock: *interlock_group
    interlock_wait_time: 300ms
  - platform: shutdown
    name: "${dev_name}_shutdown"
  - platform: restart
    name: "${dev_name}_restart"

output: # teplaten to enable using one button co cycle device statest OFF-LOW-HIGH-OFF-...
  - platform: template
    id: custom_fan
    type: float
    write_action:
      - if:
          condition:
            lambda: return ((state == 0));
          then:
            - switch.turn_off: relay_low
            - switch.turn_off: relay_high
            - logger.log: "Stan 0"
      - if:
          condition:
            lambda: return ((state > 0) && (state < 0.7));
          then:    #first turn off one and then turn on another one
            - switch.turn_off: relay_high
            - switch.turn_on: relay_low
            - logger.log: "Stan 1"
      - if:
          condition:
            lambda: return ((state > 0.7));
          then: #first turn off one and then turn on another one
            - switch.turn_off: relay_low
            - switch.turn_on: relay_high
            - logger.log: "Stan 2"

fan:
  - platform: speed
    id: WentylacjaPiwnicy
    output: custom_fan
    name: "Wentylacja Piwnicy"
    speed_count: 2

status_led:
  pin:
    number: GPIO13
    inverted: yes

sensor:
  - platform: wifi_signal
    name: "${dev_name}_wifi_signal"
    update_interval: 30s
  - platform: uptime
    name: "${dev_name}_uptime"
    update_interval: 120s

  - platform: template #for measuring energy - my device is set for 30W at high sperd and 20W for low speed on off i count only sonoff power 1W
    name: "Moc wentylatora"
    id: WentylacjaPiwnicy_current_power
    accuracy_decimals: 0
    unit_of_measurement: "W"
    device_class: POWER
    update_interval: 60s
    lambda: |-
      if (id(relay_high).state) {
        return 30.0;
      } else if (id(relay_low).state) {
        return 20.0;
      } else {
        return 1.0;
      }

text_sensor:
  - platform: version
    name: "${dev_name}_version"